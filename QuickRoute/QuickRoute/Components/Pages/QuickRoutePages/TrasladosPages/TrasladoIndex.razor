@page "/Traslados/Index"
@inject TrasladosService trasladosService
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Registro de Traslados</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title">Manejo de Traslados</h5>
            <a href="/Traslados/View" class="btn btn-primary">
                <span class="bi bi-plus-square mt-3"></span> Crear
            </a>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
            </div>
            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" disabled selected>Elija una opción</option>
                        <option value="TrasladoId">TrasladoId</option>
                        <option value="Nombres">Nombres</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>

                <div class="col-3">
                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer">
                    </button>
                </div>
            </div>

           
            <table class="table table-hover">
                <thead class="table-striped text-black">
                    <tr>
                        <th>TrasladoId</th>
                        <th>Nombres</th>
                        <th>Dirección</th>
                        <th>Total Monto</th>
                        <th>Carros</th>
                        @if(isAdmin){
                            <th>Usuario</th>
                            <th>Editar</th>
                            <th>Eliminar</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var traslado in ListaTraslados)
                    {
                        <tr>
                            <td>@traslado.TrasladoId</td>
                            <td>@traslado.Nombres</td>
                            <td>@traslado.Direccion</td>
                            <td>@traslado.TrasladosDetalles.Sum(d => d.Monto).ToString("N2")</td>
                            <td>
                                @if (traslado.TrasladosDetalles.Any())
                                {
                                    <ul>
                                        @foreach (var detalle in traslado.TrasladosDetalles)
                                        {
                                            <li>@(detalle.Carro?.Marca ?? "N/A") - @detalle.Monto.ToString("N2")</li>
                                        }
                                    </ul>
                                }
                            </td>
                            
                            @if(isAdmin){
                                <td>
                                    @if (traslado.Usuario != null)
                                    {
                                        @traslado.Usuario.Email
                                    }
                                </td>
                                <td>
                                    <a href="/Traslados/View/@traslado.TrasladoId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                                </td>
                                <td>
                                    <button class="btn btn-outline-danger bi bi-trash" @onclick="() => EliminarTraslado(traslado.TrasladoId)"></button>
                                </td>
                            }
                           
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public List<Traslados> ListaTraslados { get; set; } = new List<Traslados>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    private string? UsuarioIdActual { get; set; }
    private bool isAdmin { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarTraslados();
    }

    private async Task CargarTraslados()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
        var user = authState.User;
        UsuarioIdActual = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (user.IsInRole("Admin"))
        {
            ListaTraslados = await trasladosService.Listar(c => c.TrasladoId > 0);
        }
        else if (!string.IsNullOrEmpty(UsuarioIdActual))
        {
            ListaTraslados = await trasladosService.ListarPorUsuario(UsuarioIdActual);
        }
    }

    private async Task Buscar()
    {
        if (string.IsNullOrEmpty(Filtro) || string.IsNullOrEmpty(ValorFiltro))
        {
            await CargarTraslados();
            return;
        }

        if (Filtro == "TrasladoId")
        {
            if (int.TryParse(ValorFiltro, out var trasladoId))
            {
                ListaTraslados = await trasladosService.Listar(t => t.TrasladoId == trasladoId);
            }
        }
        else if (Filtro == "Nombres")
        {
            ListaTraslados = await trasladosService.Listar(t => t.Nombres.Contains(ValorFiltro));
        }
        StateHasChanged();
    }

    private async Task Restablecer()
    {
        await CargarTraslados();
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }

    private async Task EliminarTraslado(int trasladoId)
    {
        if (await trasladosService.Eliminar(trasladoId))
        {
            await CargarTraslados();
        }
    }
}