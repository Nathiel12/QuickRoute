@page "/Traslados/View/{TrasladoId:int?}"
@using QuickRoute.Data.Models
@using QuickRoute.Data.Services
@inject TrasladosService trasladosService
@inject CarrosService carrosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="Traslado" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="card-title">
                    @(Traslado.TrasladoId == 0 ? "Nuevo Traslado" : "Editar Traslado")
                </h3>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label">ID</label>
                        <InputNumber class="form-control" @bind-Value="Traslado.TrasladoId" disabled />
                    </div>
                    < class="col">
                        <label class="form-label">Â¿Aprobado?</label>
                        <InputCheckbox class="form-check-input" @bind-Value="AprobadoValue" />
                </div>

                <div class="mb-3">
                    <h5>Detalle del Carro</h5>
                    <CarroPicker Carros="listaCarros"
                                 CarroId="@selectedCarroId"
                                 Monto="@Traslado.Monto"
                                 OnCarroSelected="HandleCarroSelected" />
                </div>

            </div>

            <div class="card-footer text-center">
                <div class="btn-group" role="group">
                    <a href="/Traslados/Index" class="btn btn-outline-primary">
                        Nuevo <span class="bi bi-file-earmark-fill"></span>
                    </a>
                    <button type="submit" class="btn btn-outline-success">
                        Guardar <span class="bi bi-file-earmark-text-fill"></span>
                    </button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">
                        Eliminar <span class="bi bi-trash-fill"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? TrasladoId { get; set; }
    
    private bool AprobadoValue
    {
        get => Traslado.Aprobado ?? false;
        set => Traslado.Aprobado = value;
    }
    

    public Traslados Traslado { get; set; } = new Traslados() { Carros = new List<Carros>() };

    public List<Carros> listaCarros { get; set; } = new List<Carros>();


    private int selectedCarroId;

    protected override async Task OnInitializedAsync()
    {
        listaCarros = await carrosService.Listar(c => c.CarroId > 0);

        if (TrasladoId.HasValue && TrasladoId.Value != 0)
        {
            var trasladoEncontrado = await trasladosService.Buscar(TrasladoId.Value);
            if (trasladoEncontrado is not null)
            {
                Traslado = trasladoEncontrado;
                if (Traslado.Carros != null && Traslado.Carros.Any())
                {
                    selectedCarroId = Traslado.Carros.First().CarroId;
                }
            }
            else
            {
                // If not found, navigate back to the index.
                navigationManager.NavigateTo("/Traslados/Index");
            }
        }
        else
        {
            // For a new Traslado, set a default value if needed.
            Traslado.Aprobado = false;
        }
    }
    
    private async Task HandleCarroSelected((Carros Carro, double Monto) data)
    {
        Traslado.Monto = data.Monto;
        
        if (Traslado.Carros == null)
        {
            Traslado.Carros = new List<Carros>();
        }
        else
        {
            // Clear any previously selected Carro.
            Traslado.Carros.Clear();
        }
        Traslado.Carros.Add(data.Carro);

        selectedCarroId = data.Carro.CarroId;
    }

    private async Task Guardar()
    {
        if (await trasladosService.Guardar(Traslado))
        {
            navigationManager.NavigateTo("/Traslados/Index");
        }
    }

    private async Task Eliminar()
    {
        if (Traslado.TrasladoId != 0)
        {
            await trasladosService.Eliminar(Traslado.TrasladoId);
            navigationManager.NavigateTo("/Traslados/Index");
        }
    }
}