@page "/Traslados/View/{TrasladoId:int?}"
@inject TrasladosService trasladosService
@attribute [Authorize]
@inject CarrosService carrosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="Traslado" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="card-title">
                    @(Traslado.TrasladoId == 0 ? "Nuevo Traslado" : "Editar Traslado")
                </h3>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-2">
                        <label class="form-label">ID</label>
                        <InputNumber class="form-control" @bind-Value="Traslado.TrasladoId" disabled />
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">Nombres</label>
                        <InputText class="form-control" @bind-Value="Traslado.Nombres" />
                        <ValidationMessage For="@(() => Traslado.Nombres)" />
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">Dirección</label>
                        <InputText class="form-control" @bind-Value="Traslado.Direccion" />
                        <ValidationMessage For="@(() => Traslado.Direccion)" />
                    </div>
                </div>

                <div class="border border-success p-3 mt-3">
                    <h3>Detalle del Carro</h3>
                    <div class="row align-items-end">
                        <div class="col-auto">
                            <label class="form-label">Carro</label>
                            <InputSelect class="form-select form-select-sm" @bind-Value="DetalleSeleccionado.CarroId">
                                <option disabled value="0">Seleccione Carro</option>
                                @foreach (var carro in listaCarros)
                                {
                                    <option value="@carro.CarroId">@($"{carro.Marca} {carro.Modelo}")</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-auto ms-2">
                            <label class="form-label">Monto</label>
                            <InputNumber class="form-control form-control-sm" @bind-Value="DetalleSeleccionado.Monto" min="0"/>
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-primary" @onclick="AgregarDetalle">
                                <span class="bi bi-plus"></span><strong>Agregar</strong>
                            </button>
                        </div>
                    </div>
                    <table class="table mt-3">
                        <thead>
                            <tr>
                                <th>Carro</th>
                                <th>Monto</th>
                                <th>Acción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in Traslado.TrasladosDetalles)
                            {
                                <tr>
                                    <td>
                                        @(detalle.Carro != null
                                            ? $"{detalle.Carro.Marca} {detalle.Carro.Modelo}"
                                            : listaCarros.FirstOrDefault(c => c.CarroId == detalle.CarroId)?.Marca)
                                    </td>
                                    <td>@detalle.Monto.ToString("N2")</td>
                                    <td>
                                        <button type="button" class="btn btn-outline-dark" @onclick="() => EliminarDetalle(detalle)">
                                            <span class="bi bi-trash"></span> Eliminar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                    <div class="d-flex justify-content-between">
                        <div class="d-flex flex-column">
                            <label class="mb-1">Cantidad:</label>
                            <div class="border p-2">@Traslado.TrasladosDetalles.Count</div>
                        </div>
                        <div class="d-flex flex-column">
                            <label class="mb-1">Total:</label>
                            <div class="border p-2 text-end">@Traslado.TrasladosDetalles.Sum(d => d.Monto).ToString("N2")</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer text-center">
                <div class="btn-group" role="group">
                    <a href="/Traslados/Index" class="btn btn-outline-primary">
                        Volver <span class="bi bi-file-earmark-fill"></span>
                    </a>
                    <button type="submit" class="btn btn-outline-success">
                        Guardar <span class="bi bi-file-earmark-text-fill"></span>
                    </button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">
                        Eliminar <span class="bi bi-trash-fill"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? TrasladoId { get; set; }
    
    public Traslados Traslado { get; set; } = new Traslados();
    public List<Carros> listaCarros { get; set; } = new List<Carros>();
    public TrasladosDetalle DetalleSeleccionado { get; set; } = new TrasladosDetalle();

    protected override async Task OnInitializedAsync()
    {
        listaCarros = await carrosService.Listar(c => c.Aprobado);

        if (TrasladoId.HasValue && TrasladoId.Value != 0)
        {
            var trasladoEncontrado = await trasladosService.Buscar(TrasladoId.Value);
            if (trasladoEncontrado is not null)
            {
                Traslado = trasladoEncontrado;
            }
            else
            {
                navigationManager.NavigateTo("/Traslados/Index");
            }
        }
    }

    private void AgregarDetalle()
    {
        if (DetalleSeleccionado.CarroId > 0 && DetalleSeleccionado.Monto > 0)
        {
            var detalleNuevo = new TrasladosDetalle
            {
                CarroId = DetalleSeleccionado.CarroId,
                Monto = DetalleSeleccionado.Monto
            };
            Traslado.TrasladosDetalles.Add(detalleNuevo);
            DetalleSeleccionado = new TrasladosDetalle();
        }
    }

    private void EliminarDetalle(TrasladosDetalle detalle)
    {
        Traslado.TrasladosDetalles.Remove(detalle);
    }

    private async Task Guardar()
    {
        if (await trasladosService.Guardar(Traslado))
        {
            navigationManager.NavigateTo("/Traslados/Index");
        }
    }

    private async Task Eliminar()
    {
        if (Traslado.TrasladoId != 0)
        {
            await trasladosService.Eliminar(Traslado.TrasladoId);
            navigationManager.NavigateTo("/Traslados/Index");
        }
    }
}