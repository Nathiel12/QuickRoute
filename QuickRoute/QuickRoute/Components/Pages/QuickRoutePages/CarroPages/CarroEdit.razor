@*Nathiel Taveras*@
@page "/Carros/Edit/{CarroId:int}"
@inject CarrosService carroService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@*HTML*@
<PageTitle>Create</PageTitle>
<EditForm Model="Carro" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	@* Label para notificaciones *@
	<label style="color:red;" hidden="@string.IsNullOrEmpty(errorMensaje)">@errorMensaje</label>

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center">
				<h5 class="card-title">Registro de Carros</h5>
			</div>

			<div class="card-body">

				@* CarroId *@
				<div class="mb-3">
					<label class="form-label"><strong>CarroId</strong></label>
					<InputNumber class="form-control" @bind-Value="Carro.CarroId" readonly></InputNumber>
				</div>

				@* Prioridad *@
				<div class="mb-3">

					<div class="mb-3">
						<label class="form-label"><strong>Marca</strong></label>
						<InputText class="form-control" @bind-Value="Carro.Marca"></InputText>
						<ValidationMessage For="(() => Carro.Marca)" />
					</div>
				</div>

				@* Modelo *@
				<div class="mb-3">
					<label class="form-label"><strong>Modelo</strong></label>
					<InputText class="form-control" @bind-Value="Carro.Modelo"></InputText>
					<ValidationMessage For="(() => Carro.Modelo)" />
				</div>

				@* Fecha Fabricacion *@
				<div class="mb-3">
					<label class="form-label"><strong>Fecha de Fabricacion</strong></label>
					<InputDate class="form-control" @bind-Value="Carro.FechaFabricacion"></InputDate>
					<ValidationMessage For="(() => Carro.FechaFabricacion)" />
				</div>

				@* Color *@
				<div class="mb-3">
					<label class="form-label"><strong>Color</strong></label>
					<InputText class="form-control" @bind-Value="Carro.Color"></InputText>
					<ValidationMessage For="(() => Carro.Color)" />
				</div>

				@* Precio *@
				<div class="mb-3">
					<label class="form-label"><strong>Precio</strong></label>
					<InputNumber class="form-control" @bind-Value="Carro.Precio"></InputNumber>
					<ValidationMessage For="(() => Carro.Precio)" />

				</div>

				@* Numero de Título *@
				<div class="mb-3">
					<label class="form-label"><strong>Numero de Título</strong></label>
					<InputText class="form-control" @bind-Value="Carro.NumeroTitulo"></InputText>
					<ValidationMessage For="(() => Carro.NumeroTitulo)" />
				</div>

			</div>


			@* Footer *@
			<div class="card-footer text-center mt-2">
				<a href="/Carros/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-left"></span>Volver</a>
				<button type="submit" class="btn btn-outline-success bi bi-floppy">Modificar</button>
			</div>
		</div>
	</div>
</EditForm>


@code {
	[Parameter]
	public int CarroId { get; set; }

	public Carros Carro { get; set; } = new Carros();
	public string errorMensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync(){
		Carro = await carroService.Buscar(CarroId);
	}

	private async Task<bool> Validar()
	{
		errorMensaje = string.Empty;


		if (await carroService.ExisteTitulo(Carro.NumeroTitulo) &&
			Carro.NumeroTitulo != (await carroService.Buscar(CarroId)).NumeroTitulo)
		{
			errorMensaje = "Ya existe un registro con este Numero de Titulo.";
			return false;
		}

		return true;
	}

	public async Task Guardar()
	{
		errorMensaje = string.Empty;

		if (!await Validar())
		{
			return;
		}

		var guardo = await carroService.Guardar(this.Carro);
		if (guardo != null)
		{
			navigationManager.NavigateTo("/Carros/Index");
		}
		else
		{
			errorMensaje = "Error al guardar el Registro";
		}


	}

}
