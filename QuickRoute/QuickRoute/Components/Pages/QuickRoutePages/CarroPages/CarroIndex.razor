@page "/Carros/Index"
@attribute [Authorize]
@inject CarrosService carroService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Registro de Carros</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header space-between">
            <h5 class="card-title">Registro de Carros</h5>
            <a href="/Carros/Create" class="btn btn-primary"> <span class="bi bi-plus-square mt-3"></span> Crear</a>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Busqueda</strong></label>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opcion</option>
                        <option value="CarroId">CarroId</option>
                        <option value="Marca">Marca</option>
                        <option value="Color">Color</option>
                        <option value="FechaRegistro">Fecha Registro</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>

                <div class="col-3">
                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise"
                            @onclick="Restablecer">
                    </button>
                </div>

                <div class="row mt-3">
                    <div class="col-3">
                        <label class="col-form-label"><strong>Desde</strong></label>
                        <InputDate class="form-control" @bind-Value="Desde"></InputDate>
                    </div>

                    <div class="col-3">
                        <label class="col-form-label"><strong>Hasta</strong></label>
                        <div class="input-group">
                            <InputDate class="form-control" @bind-Value="Hasta"></InputDate>
                        </div>
                    </div>
                </div>
            </div>

            <table class="table table-hover">
                <thead class="table  table-striped text-black">
                    <tr>
                        <th>CarroId</th>
                        <th>Fecha de Registro</th>
                        <th>Fecha de Fabricacion</th>
                        <th>Marca</th>
                        <th>Modelo</th>
                        <th>Color</th>
                        <th>Precio</th>
                        <th>Monto de Traslado</th>
                        <th>Numero de Titulo</th>
                        <th>Editar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var carro in ListaCarros)
                    {
                        <tr>
                            <td>@carro.CarroId</td>
                            <td>@carro.FechaRegistro.ToString("dd/MM/yyyy")</td>
                            <td>@carro.FechaFabricacion.ToString("dd/MM/yyyy")</td>
                            <td>@carro.Marca</td>
                            <td>@carro.Modelo</td>
                            <td>@carro.Color</td>
                            <td>@carro.Precio.ToString("N2")</td>
                            <td>@montoTrasladoDict.GetValueOrDefault(carro.CarroId, 0).ToString("N2")</td>
                            <td>@carro.NumeroTitulo</td>
                            <td>
                                <a href="/Carros/Edit/@carro.CarroId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                            </td>
                            <td>
                                <a href="/Carros/Delete/@carro.CarroId" class="btn btn-outline-danger bi bi-trash"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer">
            <div class="row">
                <div class="col">
                    <strong>Cantidad de Carros:</strong> @ListaCarros.Count
                </div>
                <div class="col">
                    <strong>Cantidad de Carros Trasladados:</strong> @totalTrasladados
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Carros> ListaCarros { get; set; } = new List<Carros>();
    private Dictionary<int, double> montoTrasladoDict = new();
    private int totalTrasladados;

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    public DateTime? Desde { get; set; }
    public DateTime? Hasta { get; set; }
    private string? UsuarioIdActual { get; set; }

    protected override async Task OnInitializedAsync()
{
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    UsuarioIdActual = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

    if (user.IsInRole("Admin"))
    {
        ListaCarros = await carroService.Listar(c => c.CarroId > 0); 
    }
    else if (!string.IsNullOrEmpty(UsuarioIdActual))
    {
        ListaCarros = await carroService.Listar(c => c.Id == UsuarioIdActual);
    }

    var detalles = await carroService.ObtenerTodosDetalles();
    
    var carrosIds = ListaCarros.Select(c => c.CarroId).ToHashSet();
    var detallesFiltrados = detalles.Where(d => carrosIds.Contains(d.CarroId)).ToList();
    
    montoTrasladoDict = detallesFiltrados
        .GroupBy(d => d.CarroId)
        .ToDictionary(g => g.Key, g => g.Sum(d => d.Monto));
    
    totalTrasladados = montoTrasladoDict.Count; 
}

    private async Task Buscar()
    {
        if (Filtro == "CarroId")
        {
            if (int.TryParse(ValorFiltro, out var carroId))
            {
                ListaCarros = await carroService.Listar(c => c.CarroId == carroId);
            }
        }
        else if (ValorFiltro.Trim() != "" && Filtro == "Marca")
        {
            ListaCarros = await carroService
                .Listar(c => c.Marca.ToLower().Contains(ValorFiltro.ToLower()));
        }
        else if (ValorFiltro.Trim() != "" && Filtro == "Color")
        {
            ListaCarros = await carroService
                .Listar(c => c.Color.ToLower().Contains(ValorFiltro.ToLower()));
        }
        else if (Filtro == "FechaRegistro")
        {
            ListaCarros = await carroService
                .Listar(c => c.FechaRegistro >= Desde && c.FechaRegistro <= Hasta);
        }

        totalTrasladados = ListaCarros.Count(c => montoTrasladoDict.ContainsKey(c.CarroId));
        StateHasChanged();
    }

    private async Task Restablecer()
    {
        ListaCarros = await carroService.Listar(c => c.CarroId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
        totalTrasladados = ListaCarros.Count(c => montoTrasladoDict.ContainsKey(c.CarroId));
        StateHasChanged();
    }
}