@page "/Admin/Carros/Index"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject CarrosService carroService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@* HTML *@
<PageTitle>Registro de Carros</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header space-between">
            <h5 class="card-title">Registro de Carros</h5>
        </div>

        <div class="card-body">

            @*labels*@
            <div class="row">

                @*Filtrar por*@
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>

                @*ValorFiltro*@
                <div class="col-4">
                    <label class="col-form-label"><strong>Busqueda</strong></label>
                </div>
            </div>

            @*Inputs y botones*@
            <div class="row align-items-center">
                @*filtro*@
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opcion</option>
                        <option value="CarroId">CarroId</option>
                        <option value="Aprobado">Aprobados</option>
                        <option value="Pendiente">Pendiente</option>
                        <option value="FechaRegistro">Fecha Registro</option>
                    </InputSelect>
                </div>

                @*Busqueda*@
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>

                @*Restablecer*@
                <div class="col-3">
                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise"
                            @onclick="Restablecer">
                    </button>
                </div>

                @*FiltroFecha*@
                <div class="row mt-3">

                    @*Desde*@
                    <div class="col-3">
                        <label class="col-form-label"><strong>Desde</strong></label>
                        <InputDate class="form-control" @bind-Value="Desde"></InputDate>
                    </div>

                    @*Hasta*@
                    <div class="col-3">
                        <label class="col-form-label"><strong>Hasta</strong></label>
                        <div class="input-group">
                            <InputDate class="form-control" @bind-Value="Hasta"></InputDate>
                        </div>

                    </div>
                </div>

            </div>
            @* Tabla *@
            <table class="table table-hover">
                <thead class="table  table-striped text-black">
                    <tr>
                        <th>CarroId</th>
                        <th>Fecha de Registro</th>
                        <th>Marca</th>
                        <th>Modelo</th>
                        <th>Color</th>
                        <th>Estado</th>
                        <th>Usuario</th>
                        <th>Aprobar</th>
                        <th>Rechazar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var carro in ListaCarros)
                    {
                        <tr>
                            <td> @carro.CarroId</td>
                            <td> @carro.FechaRegistro.ToString("dd/MM/yyyy")</td>
                            <td> @carro.Marca</td>
                            <td> @carro.Modelo</td>
                            <td> @carro.Color</td>
                            <td>
                                @if (carro.Aprobado)
                                {
                                    <span class="badge bg-success">Aprobado</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning">Pendiente</span>
                                }
                            </td>
                            <td> @carro.Usuario.Email</td>

                            <td>
                                <button class="btn btn-outline-success bi bi-check-circle"@onclick="() => AprobarCarro(carro.CarroId)"></button>
                            </td>
                            <td>
                                <button class="btn btn-outline-danger bi bi-x-circle" @onclick="() => EliminarCarro(carro.CarroId)"></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    public List<Carros> ListaCarros { get; set; } = new List<Carros>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    public DateTime? Desde { get; set; }

    public DateTime? Hasta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListaCarros = await carroService.ListarSegunPermisos(incluirNoAprobados: true);
        Desde = null;
        Hasta = null;
    }

    private async Task Buscar()
    {
        if (Filtro == "CarroId")
        {
            if (int.TryParse(ValorFiltro, out var carroId))
            {
                ListaCarros = await carroService
                    .Listar(c => c.CarroId == carroId);
            }

        }
        else if (ValorFiltro.Trim() != "" && Filtro == "Aprobado")
        {
            ListaCarros = await carroService
                .Listar(c => c.Aprobado);
        }
        else if (ValorFiltro.Trim() != "" && Filtro == "Pendiente")
        {
            ListaCarros = await carroService
                .Listar(c => !c.Aprobado);
        }
        else if (Filtro == "FechaRegistro")
        {
            ListaCarros = await carroService
                .Listar(c => c.FechaRegistro >= Desde && c.FechaRegistro <= Hasta);
        }


        StateHasChanged();

    }
    private async Task Restablecer()
    {
        ListaCarros = await carroService.ListarSegunPermisos(incluirNoAprobados: true);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
    private async Task AprobarCarro(int carroId)
    {
        var resultado = await carroService.AprobarCarro(carroId);
        if (resultado)
        {
            await Restablecer(); // Recargar los datos
        }
    }
    private async Task EliminarCarro(int carroId)
    {
        // Aquí puedes agregar confirmación antes de eliminar
        var resultado = await carroService.Eliminar(carroId);
        if (resultado)
        {
            await Restablecer(); // Recargar los datos
        }
    }
}
