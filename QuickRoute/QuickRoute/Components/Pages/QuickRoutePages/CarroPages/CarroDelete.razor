@*Nathiel Taveras*@
@page "/Carros/Delete/{CarroId:int}"
@inject CarrosService carroService
@attribute [Authorize]
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@* HTML *@
<PageTitle>Eliminar</PageTitle>

@*Labels para notificaciones*@
<label style="color:red;" hidden="@string.IsNullOrEmpty(Confirmacion)">@Confirmacion</label>
<label style="color:darkred">@Pregunta</label>

<div class="container">
	<div class="card shadow-lg">
		<div class="card-header text-center">
			<h5 class="card-title">Eliminar Carro</h5>
		</div>
		@*Datos y botones*@
		<div class="card-body">
			<p><strong>CarroId:</strong>@Carro.CarroId</p>
			<p><strong>Fecha de Fabricacion:</strong>@Carro.FechaFabricacion.ToString("dd/MM/yyyy")</p>
			<p><strong>Marca:</strong>@Carro.Marca</p>
			<p><strong>Modelo:</strong>@Carro.Modelo</p>
			<p><strong>Color:</strong>@Carro.Color</p>
			<p><strong>Precio:</strong>@Carro.Precio.ToString("N2")</p>

			<div class="card-footer text-center mt-2">
				<a href="/Carros/Index" class="btn btn-outline-secondary"><span class="bi bi-arrow-left"></span>Cancelar</a>
				<button class="btn btn-outline-danger" @onclick="Eliminar">Eliminar</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public int CarroId { get; set; }

	private Carros Carro { get; set; } = new Carros();
	private string Confirmacion { get; set; } = string.Empty;
	private string Pregunta { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		var authState = await authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var usuarioId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
		Carro = await carroService.Buscar(CarroId);
		if (Carro == null)
		{
			navigationManager.NavigateTo("/Carros/Index");
			return;
		}
		if (!user.IsInRole("Admin") && Carro.Id != usuarioId)
		{
			navigationManager.NavigateTo("/Account/AccessDenied");
			return;
		}
		Pregunta = "¿Esta seguro de querer eliminar el Registro?";
	}

	public async Task Eliminar()
	{
		Confirmacion = string.Empty;
		var verificar = await carroService.TieneTrasladosActivos(CarroId);
		if(verificar){
			Confirmacion = "No se puede eliminar el registro (El carro esta en proceso de traslado)";
			return;
		}
		else
		{
			Confirmacion = string.Empty;
			var eliminado = await carroService.Eliminar(Carro.CarroId);
			if (eliminado != null)
			{
				Confirmacion = "Registro Eliminado Correctamente";
				navigationManager.NavigateTo("/Carros/Index");
			}
			else
			{
				Confirmacion = "Error al eliminar el Registro";
			}
		}
		
	}
}
