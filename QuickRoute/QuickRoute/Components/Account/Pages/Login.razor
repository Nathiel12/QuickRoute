@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using QuickRoute.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar sesión</PageTitle>

<div class="bg"></div>

<main class="form-signin">
    <h1 class="h3">Iniciar sesión</h1>

    <StatusMessage Message="@errorMessage" />
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-floating">
            <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control"
                       autocomplete="username" aria-required="true" placeholder="nombre@ejemplo.com" />
            <label for="Input.Email">Correo electrónico</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>

        <div class="form-floating">
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control"
                       autocomplete="current-password" aria-required="true" placeholder="contraseña" />
            <label for="Input.Password">Contraseña</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>

        <div class="form-check form-switch">
            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
            <label class="form-check-label">Recordarme</label>
        </div>

        <button type="submit" class="w-100 btn btn-lg">Siguiente</button>

        <p class="mt-3 text-center">
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                Registrarse como nuevo usuario
            </a>
        </p>
    </EditForm>

    <p class="copyright">&copy; @DateTime.Now.Year</p>
</main>

@code {
    // El código permanece igual que en tu versión original
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Usuario inició sesión.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Cuenta de usuario bloqueada.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Intento de inicio de sesión inválido.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El correo electrónico es requerido")]
        [EmailAddress(ErrorMessage = "El correo electrónico no es válido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "¿Recordarme?")]
        public bool RememberMe { get; set; }
    }
}