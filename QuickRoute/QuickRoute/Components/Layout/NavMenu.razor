@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<nav class="navbar navbar-expand-lg navbar-dark custom-gradient">
    <div class="container-fluid">
        <!-- Logo a la izquierda -->
        <NavLink class="navbar-brand" href="" Match="NavLinkMatch.All">
            QuickRoute
        </NavLink>

        <button class="navbar-toggler" type="button" @onclick="ToggleNavbar" aria-expanded="@navbarCollapsed">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse @(navbarCollapsed ? "show" : "")" id="navbarContent">
            <!-- Elementos del centro -->
            <ul class="navbar-nav mx-auto">
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="@GetCasosLink()">
                                <span class="bi bi-info-square-fill" aria-hidden="true"></span> Casos
                            </NavLink>
                        </li>

                        <li class="nav-item">
                            <NavLink class="nav-link" href="/Contactos/Index">
                                <span class="bi bi-journal-bookmark-fill" aria-hidden="true"></span> Contactos
                            </NavLink>
                        </li>

                        <li class="nav-item">
                            <NavLink class="nav-link" href="@GetSugerenciasLink()">
                                <span class="bi bi-archive" aria-hidden="true"></span> Sugerencias
                            </NavLink>
                        </li>

                        <li class="nav-item">
                            <NavLink class="nav-link" href="/Votaciones/Index">
                                <span class="bi bi-bar-chart-fill" aria-hidden="true"></span> Votos
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/carrito">
                                <span class="bi bi-cart" aria-hidden="true"></span>
                            </NavLink>
                        </li>
                    </Authorized>
                </AuthorizeView>
            </ul>

            <!-- Elementos a la derecha (Login/Logout) -->
            <ul class="navbar-nav">
                <AuthorizeView>
                    <NotAuthorized>
                        @if (!isLoginPage)
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="Account/Login" ActiveClass="">
                                    <span class="bi bi-person-circle" aria-hidden="true"></span> Iniciar Sesión
                                </NavLink>
                            </li>
                        }
                    </NotAuthorized>

                    <Authorized>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" @onclick="ToggleDropdown" @onblur="CloseDropdown" role="button" aria-expanded="@dropdownOpen">
                                <span class="bi bi-person-fill" aria-hidden="true"></span> @context.User.Identity?.Name
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end @(dropdownOpen ? "show" : "")">
                                <li>
                                    <NavLink class="dropdown-item" href="Account/Manage" @onclick="CloseDropdown">
                                        <span class="bi bi-person-fill" aria-hidden="true"></span> Mi cuenta
                                    </NavLink>
                                </li>
                                <li>
                                    <form action="Account/Logout" method="post">
                                        <AntiforgeryToken />
                                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                        <button type="submit" class="dropdown-item">
                                            <span class="bi bi-arrow-bar-left" aria-hidden="true"></span> Logout
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    </Authorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>

@code {
    private string? currentUrl;
    private bool isAdmin = false;
    private bool isLoginPage = false;
    private bool dropdownOpen = false;
    private bool navbarCollapsed = true;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        isLoginPage = currentUrl.Contains("Account/Login", StringComparison.OrdinalIgnoreCase);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initDropdowns");
        }
    }

    private string GetSugerenciasLink()
    {
        return isAdmin ? "/Sugerencias/Index" : "/Sugerencias/Create";
    }

    private string GetCasosLink()
    {
        return isAdmin ? "/Casos/Index" : "/Casos/Create";
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        isLoginPage = currentUrl.Contains("Account/Login", StringComparison.OrdinalIgnoreCase);
        StateHasChanged();
    }

    private void ToggleDropdown()
    {
        dropdownOpen = !dropdownOpen;
    }

    private void CloseDropdown()
    {
        dropdownOpen = false;
    }

    private void ToggleNavbar()
    {
        navbarCollapsed = !navbarCollapsed;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}