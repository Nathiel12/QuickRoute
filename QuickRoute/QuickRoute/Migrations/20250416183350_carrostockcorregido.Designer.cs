// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickRoute.Data;

#nullable disable

namespace QuickRoute.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250416183350_carrostockcorregido")]
    partial class carrostockcorregido
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuickRoute.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Carrito", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CarritoId")
                        .HasColumnType("int");

                    b.Property<int>("CarroId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAgregado")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarroId");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Carros", b =>
                {
                    b.Property<int>("CarroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarroId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CantidadStock")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disponibilidad")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFabricacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int?>("TrasladosTrasladoId")
                        .HasColumnType("int");

                    b.HasKey("CarroId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TrasladosTrasladoId");

                    b.ToTable("Carros");

                    b.HasData(
                        new
                        {
                            CarroId = 1,
                            CantidadStock = 10,
                            Color = "Azul",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2011, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/1.jpg",
                            Marca = "Honda",
                            Modelo = "Civic",
                            Precio = 24250.0
                        },
                        new
                        {
                            CarroId = 2,
                            CantidadStock = 15,
                            Color = "Rojo",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2011, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/2.jpg",
                            Marca = "Honda",
                            Modelo = "Civic",
                            Precio = 25800.0
                        },
                        new
                        {
                            CarroId = 3,
                            CantidadStock = 5,
                            Color = "Rojo",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2014, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/3.jpg",
                            Marca = "Toyota",
                            Modelo = "Corolla",
                            Precio = 22325.0
                        },
                        new
                        {
                            CarroId = 4,
                            CantidadStock = 6,
                            Color = "Blanco",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2018, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/4.jpg",
                            Marca = "Toyota",
                            Modelo = "Camry",
                            Precio = 29795.0
                        },
                        new
                        {
                            CarroId = 5,
                            CantidadStock = 9,
                            Color = "Negro",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2015, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/5.jpg",
                            Marca = "Audi",
                            Modelo = "a4",
                            Precio = 44100.0
                        },
                        new
                        {
                            CarroId = 6,
                            CantidadStock = 7,
                            Color = "Amarillo",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2016, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/6.jpg",
                            Marca = "BMW",
                            Modelo = "m4",
                            Precio = 80875.0
                        },
                        new
                        {
                            CarroId = 7,
                            CantidadStock = 8,
                            Color = "Rojo",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2020, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/7.jpg",
                            Marca = "Ford",
                            Modelo = "Mustang",
                            Precio = 42865.0
                        },
                        new
                        {
                            CarroId = 8,
                            CantidadStock = 5,
                            Color = "Negro",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/8.jpg",
                            Marca = "Chevrolet",
                            Modelo = "Camaro",
                            Precio = 37695.0
                        },
                        new
                        {
                            CarroId = 9,
                            CantidadStock = 12,
                            Color = "Blanco",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2017, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/9.jpg",
                            Marca = "Volkswagen",
                            Modelo = "Golf",
                            Precio = 23995.0
                        },
                        new
                        {
                            CarroId = 10,
                            CantidadStock = 6,
                            Color = "Plateado",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2018, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/10.jpg",
                            Marca = "Mercedes-Benz",
                            Modelo = "C-Class",
                            Precio = 55150.0
                        },
                        new
                        {
                            CarroId = 11,
                            CantidadStock = 9,
                            Color = "Gris",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2021, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/11.jpg",
                            Marca = "Nissan",
                            Modelo = "Sentra",
                            Precio = 21510.0
                        },
                        new
                        {
                            CarroId = 12,
                            CantidadStock = 7,
                            Color = "Azul Marino",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2020, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/12.jpg",
                            Marca = "Hyundai",
                            Modelo = "Tucson",
                            Precio = 27650.0
                        },
                        new
                        {
                            CarroId = 13,
                            CantidadStock = 4,
                            Color = "Verde",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2019, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/13.jpg",
                            Marca = "Kia",
                            Modelo = "Sportage",
                            Precio = 26490.0
                        },
                        new
                        {
                            CarroId = 14,
                            CantidadStock = 5,
                            Color = "Marrón",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2021, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/14.jpg",
                            Marca = "Subaru",
                            Modelo = "Outback",
                            Precio = 31995.0
                        },
                        new
                        {
                            CarroId = 15,
                            CantidadStock = 8,
                            Color = "Rojo Carmesí",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2020, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/15.jpg",
                            Marca = "Mazda",
                            Modelo = "CX-5",
                            Precio = 29185.0
                        },
                        new
                        {
                            CarroId = 16,
                            CantidadStock = 3,
                            Color = "Amarillo",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/16.jpg",
                            Marca = "Jeep",
                            Modelo = "Wrangler",
                            Precio = 39995.0
                        },
                        new
                        {
                            CarroId = 17,
                            CantidadStock = 6,
                            Color = "Blanco",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2021, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/17.jpg",
                            Marca = "Tesla",
                            Modelo = "Model 3",
                            Precio = 46990.0
                        },
                        new
                        {
                            CarroId = 18,
                            CantidadStock = 4,
                            Color = "Gris Perla",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2019, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/18.jpg",
                            Marca = "Lexus",
                            Modelo = "RX 350",
                            Precio = 51275.0
                        },
                        new
                        {
                            CarroId = 19,
                            CantidadStock = 2,
                            Color = "Negro",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2020, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/19.jpg",
                            Marca = "Porsche",
                            Modelo = "911",
                            Precio = 113200.0
                        },
                        new
                        {
                            CarroId = 20,
                            CantidadStock = 3,
                            Color = "Plateado",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2018, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/20.jpg",
                            Marca = "Land Rover",
                            Modelo = "Range Rover",
                            Precio = 98500.0
                        },
                        new
                        {
                            CarroId = 21,
                            CantidadStock = 5,
                            Color = "Azul Oscuro",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2021, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/21.jpg",
                            Marca = "Volvo",
                            Modelo = "XC60",
                            Precio = 45950.0
                        },
                        new
                        {
                            CarroId = 22,
                            CantidadStock = 1,
                            Color = "Rojo",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2022, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/22.jpg",
                            Marca = "Ferrari",
                            Modelo = "488 GTB",
                            Precio = 335000.0
                        },
                        new
                        {
                            CarroId = 23,
                            CantidadStock = 1,
                            Color = "Amarillo",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2021, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/23.jpg",
                            Marca = "Lamborghini",
                            Modelo = "Huracán",
                            Precio = 261274.0
                        },
                        new
                        {
                            CarroId = 24,
                            CantidadStock = 7,
                            Color = "Gris Plata",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2020, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/24.jpg",
                            Marca = "Mitsubishi",
                            Modelo = "Outlander",
                            Precio = 28795.0
                        },
                        new
                        {
                            CarroId = 25,
                            CantidadStock = 4,
                            Color = "Negro",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2019, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/25.jpg",
                            Marca = "Dodge",
                            Modelo = "Charger",
                            Precio = 36665.0
                        },
                        new
                        {
                            CarroId = 26,
                            CantidadStock = 1,
                            Color = "Azul",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(1998, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/26.jpg",
                            Marca = "Toyota",
                            Modelo = "Corolla",
                            Precio = 2325.0
                        },
                        new
                        {
                            CarroId = 27,
                            CantidadStock = 25,
                            Color = "Negro",
                            Disponibilidad = true,
                            FechaFabricacion = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenUrl = "/img/carros/27.jpg",
                            Marca = "Toyota",
                            Modelo = "Corolla",
                            Precio = 22325.0
                        });
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Casos", b =>
                {
                    b.Property<int>("CasoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CasoId"));

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ContactoId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CasoId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("Id");

                    b.ToTable("Casos");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Contactos", b =>
                {
                    b.Property<int>("ContactoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactoId"));

                    b.Property<int>("CasoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ContactoId");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.OrdenDetalle", b =>
                {
                    b.Property<int>("OrdenDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdenDetalleId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CarroId")
                        .HasColumnType("int");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int");

                    b.Property<string>("OrdenId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("PrecioUnitario")
                        .HasColumnType("float");

                    b.HasKey("OrdenDetalleId");

                    b.HasIndex("CarroId");

                    b.HasIndex("OrdenId1");

                    b.ToTable("OrdenDetalles");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Ordenes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaOrden")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Sugerencias", b =>
                {
                    b.Property<int>("SugerenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SugerenciaId"));

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("satisfaccion")
                        .HasColumnType("int");

                    b.HasKey("SugerenciaId");

                    b.HasIndex("Id");

                    b.ToTable("Sugerencias");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.TipoVehiculos", b =>
                {
                    b.Property<int>("TipoVehiculoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoVehiculoId"));

                    b.Property<double>("PuntuacionPromedio")
                        .HasColumnType("float");

                    b.Property<int>("PuntuacionTotal")
                        .HasColumnType("int");

                    b.Property<string>("VehiculoNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoVehiculoId");

                    b.ToTable("TipoVehiculos");

                    b.HasData(
                        new
                        {
                            TipoVehiculoId = 1,
                            PuntuacionPromedio = 0.0,
                            PuntuacionTotal = 0,
                            VehiculoNombre = "Moticicleta"
                        },
                        new
                        {
                            TipoVehiculoId = 2,
                            PuntuacionPromedio = 0.0,
                            PuntuacionTotal = 0,
                            VehiculoNombre = "Camión"
                        },
                        new
                        {
                            TipoVehiculoId = 3,
                            PuntuacionPromedio = 0.0,
                            PuntuacionTotal = 0,
                            VehiculoNombre = "Excavadora"
                        },
                        new
                        {
                            TipoVehiculoId = 4,
                            PuntuacionPromedio = 0.0,
                            PuntuacionTotal = 0,
                            VehiculoNombre = "Autobús"
                        },
                        new
                        {
                            TipoVehiculoId = 5,
                            PuntuacionPromedio = 0.0,
                            PuntuacionTotal = 0,
                            VehiculoNombre = "Camión de Remolque"
                        });
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Traslados", b =>
                {
                    b.Property<int>("TrasladoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrasladoId"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TrasladoId");

                    b.HasIndex("Id");

                    b.ToTable("Traslados");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.TrasladosDetalle", b =>
                {
                    b.Property<int>("DetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleId"));

                    b.Property<int>("CarroId")
                        .HasColumnType("int");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<int>("TrasladoId")
                        .HasColumnType("int");

                    b.HasKey("DetalleId");

                    b.HasIndex("CarroId");

                    b.HasIndex("TrasladoId");

                    b.ToTable("TrasladosDetalles");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Votaciones", b =>
                {
                    b.Property<int>("VotacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VotacionId"));

                    b.Property<DateTime>("FechaEncuesta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VotacionId");

                    b.HasIndex("Id");

                    b.ToTable("Votaciones");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.VotacionesDetalles", b =>
                {
                    b.Property<int>("VotacionDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VotacionDetalleId"));

                    b.Property<int>("Puntuacion")
                        .HasColumnType("int");

                    b.Property<int>("TipoVehiculoId")
                        .HasColumnType("int");

                    b.Property<int>("VotacionId")
                        .HasColumnType("int");

                    b.HasKey("VotacionDetalleId");

                    b.HasIndex("TipoVehiculoId");

                    b.HasIndex("VotacionId");

                    b.ToTable("VotacionesDetalles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuickRoute.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuickRoute.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRoute.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuickRoute.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Carrito", b =>
                {
                    b.HasOne("QuickRoute.Data.Models.Carros", "Carro")
                        .WithMany()
                        .HasForeignKey("CarroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRoute.Data.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Carros", b =>
                {
                    b.HasOne("QuickRoute.Data.ApplicationUser", null)
                        .WithMany("Carros")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("QuickRoute.Data.Models.Traslados", null)
                        .WithMany("Carros")
                        .HasForeignKey("TrasladosTrasladoId");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Casos", b =>
                {
                    b.HasOne("QuickRoute.Data.Models.Contactos", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRoute.Data.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.OrdenDetalle", b =>
                {
                    b.HasOne("QuickRoute.Data.Models.Carros", "Carro")
                        .WithMany()
                        .HasForeignKey("CarroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRoute.Data.Models.Ordenes", "Orden")
                        .WithMany("Detalles")
                        .HasForeignKey("OrdenId1");

                    b.Navigation("Carro");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Ordenes", b =>
                {
                    b.HasOne("QuickRoute.Data.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Sugerencias", b =>
                {
                    b.HasOne("QuickRoute.Data.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Traslados", b =>
                {
                    b.HasOne("QuickRoute.Data.ApplicationUser", "Usuario")
                        .WithMany("Traslados")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.TrasladosDetalle", b =>
                {
                    b.HasOne("QuickRoute.Data.Models.Carros", "Carro")
                        .WithMany()
                        .HasForeignKey("CarroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRoute.Data.Models.Traslados", "Traslado")
                        .WithMany("TrasladosDetalles")
                        .HasForeignKey("TrasladoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Traslado");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Votaciones", b =>
                {
                    b.HasOne("QuickRoute.Data.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.VotacionesDetalles", b =>
                {
                    b.HasOne("QuickRoute.Data.Models.TipoVehiculos", "TipoVehiculo")
                        .WithMany("VotosRecibidos")
                        .HasForeignKey("TipoVehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRoute.Data.Models.Votaciones", "Votacion")
                        .WithMany("VotacionesDetalle")
                        .HasForeignKey("VotacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoVehiculo");

                    b.Navigation("Votacion");
                });

            modelBuilder.Entity("QuickRoute.Data.ApplicationUser", b =>
                {
                    b.Navigation("Carros");

                    b.Navigation("Traslados");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Ordenes", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.TipoVehiculos", b =>
                {
                    b.Navigation("VotosRecibidos");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Traslados", b =>
                {
                    b.Navigation("Carros");

                    b.Navigation("TrasladosDetalles");
                });

            modelBuilder.Entity("QuickRoute.Data.Models.Votaciones", b =>
                {
                    b.Navigation("VotacionesDetalle");
                });
#pragma warning restore 612, 618
        }
    }
}
